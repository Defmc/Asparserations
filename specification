namespace asparserations

  //Namespace for grammar API
  namespace grammar
    class Grammar
      DATA
      class TokenImp : Token
      class NonterminalImp : Nonterminal
      std::map<std::string,TokenImp> _tokens
      std::map<std::string,NonterminalImp> _nonterminals

      METHODS
      Nonterminal& add_nonterminal(const std::string&)
      Token& add_token(const std::string&)
      [const] Token& token_at(const std::string&) [const]
      [const] Nonterminal& nonterminal_at(const std::string&) [const]

    class Symbol
      std::set<Token*>& first_set() = 0      
 
    class Token : public Symbol

    class Nonterminal : public Symbol
      DATA
      std::set<Token> first_set
      std::vector<Production> productions

      METHODS
      getter for first set
      getter for productions

    class Production
      std::vector<const Symbol*> symbols


  //Namespace for generating the state machine
  namespace table

    class Item
      DATA
      const Production& production
      int marker
      const Symbol& lookahead

      METHODS

    class Item_Set
      DATA
      std::set<Item> items

      METHODS
      bool merge(const tem_Set&)

    class State
      std::map<Symbol*, State*>

    class Table
      const std::set<State>& states() const = 0

    class LR_Table : public Table
      const std::set<State>& states() const

    class LALR_Table : public Table
      const std::set<State>& states() const


  //Namespace for DSL
  namespace codegen

  class Datum
    enum class Type {Bool, Char, Int, Float}
    union
    {
      bool bool_v
      char char_v
      int int_v
      float float_v
    } _value
    Type _type

    namespace parser
      class Pattern
        Node node() = 0
      class Literal : Pattern
        Literal(const std::string&)
      class List : Pattern
        List(std::vector<Pattern*>)
      class VariadicList : Pattern
        VariadicList(std::vector<Pattern*>, Pattern*)
      class Number : Pattern
        Number()
      class Extension : Pattern
        Extension()
      class Atom : Pattern
        Atom()
